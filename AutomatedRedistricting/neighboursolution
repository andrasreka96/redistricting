def NeighbourUnit(self,u1,u2):
      if u1.id in u2.neighbours:
          return True
      return False

  def UpdateAdjacencyList(self,border_pairs,units):
      new_border = [pair for unit in units for pair in border_pairs if unit.id!=pair[0].id or unit.id!=pair[1].id]
      for unit in units:
          neighbours = self.util.getUnitsById(unit.neighbours)
          for n in neighbours:
              new_border.append(unit)

      return new_border

def AdjacencyList (self,counties):
      #for county in solution[0]:
      #get the list of districts
      logging.debug("Building adjacency list")
      border_pairs = []
      for county in counties:
          borderunits = [unit for district in county.districts for unit in district.borders]
          for u1 in borderunits:
              for u2 in borderunits:
                  if u2.district_id!=u1.district_id and u2.id in u1.neighbours and (u2,u1) not in border_pairs:
                      border_pairs.append((u1,u2))
      logging.debug("Adjacency list was constructed")
      return border_pairs

  def NeighboursInDepth(self,unit,depth):
  #returns unit neighbours in a given depth

      district = self.district_dict[unit.district_id]
      units = district.unitids
      u = unit
      neighbours = set([unit.id])
      while depth>0:
          neighbourhood=u.neighbours&units
          neighbours|=neighbourhood
          depth-=depth
          if neighbourhood:
              u = self.util.getUnitsById(random.sample(neighbourhood,1))[0]

      units-=neighbours

      #list of units that will be moved
      neighbour_units = self.util.getUnitsById(neighbours)
      for unit in self.util.getUnitsById(units):
          if not unit.neighbours & units:
              neighbour_units.append(unit)
      return self.util.getUnitsById(neighbours)

  def MoveUnits(self,depth,border_pairs):

      #chose randomly two district for make change
      units = random.sample(border_pairs,1)[0]
      fromindex = random.randint(0,1)
      u_from = units[fromindex]
      u_to = units[abs(fromindex-1)]

      unitstomove = self.NeighboursInDepth(u_from,depth)
      self.district_dict[u_to.district_id].extand(set(unitstomove))
      self.district_dict[u_from.district_id].remove(set(unitstomove))

      d1 = self.district_dict[u_from.district_id]
      d2 = self.district_dict[u_to.district_id]
      self.district_builder.BuildDistrict(d1)
      self.district_builder.BuildDistrict(d2)

      #adjacency list has to be changed
      border_pairs = self.UpdateAdjacencyList(border_pairs,unitstomove)

  def NeighbourSolution(self,counties):
      new_solution = counties
      border_pairs = self.AdjacencyList(new_solution)

      for change in self.neighbourhood:
          self.MoveUnits(change,border_pairs)

      return new_solution
